import datetime
import os.path
from StorySquadAI.contestant import StorySquadAI
from fastapi import FastAPI, Path, Depends
from fastapi.responses import HTMLResponse
import uvicorn


def setup():
    this_dir = os.path.dirname(__file__)
    this_data_dir = os.path.join(this_dir, "data")
    hoax_api = StorySquadAI(data_dir=this_data_dir)

    if "Enclosure to handle personality enumeration":
        file_needs_replaced = False
        bot_personalities_enum_file_py = os.path.join(this_dir, "bot_personalities.py")
        file_out = f"# Do not edit this file, it is automatically generated when {os.path.basename(__file__)}; is executed last run {datetime.datetime.now()}\n"
        personalities = hoax_api.list_personalities()

        file_out = file_out + "\nfrom enum import Enum\n\n\nclass BotName(str,Enum):\n"
        for personality in personalities:
            file_out = file_out + f"\t{personality} = '{personality}',\n"
        try:
            current_file = open(bot_personalities_enum_file_py, "r+").read()
            file_without_header = current_file.splitlines()[1:]
            current_file = ''.join(file_without_header)
            if current_file != ''.join(file_out.splitlines()[1:]):
                file_needs_replaced = True
        except FileNotFoundError as e:
            file_needs_replaced = True

        if file_needs_replaced:
            print("file needs update")
            with open(bot_personalities_enum_file_py, "w+") as f:
                f.write(file_out)
            print("Server updated please restart.")
            exit()


if __name__ == "app":
    base_path = "/{api_key}"
    bots = {}
    setup()
    from bot_personalities import BotName

    app = FastAPI()

if __name__ == "__main__":
    uvicorn.run(app)


@app.get("/", response_class=HTMLResponse)
def root_path():
    return "<a href='/docs/'>docs</a>"


@app.get(base_path + "/thing/{thing_name}/{bot_name}")
def thing_result(api_key, thing_name: str, bot_name: BotName):
    if api_key == "zetabot":
        output = bots[bot_name].thing(thing_name)
        return output
    else:
        return "not authorized"


@app.get(base_path + "/movie/{movie_title}/{bot_name}")
def movie_result(api_key, movie_title: str, bot_name: BotName):
    if api_key == "zetabot":
        output = bots[bot_name].movie(movie_title)
        return output
    else:
        return "not authorized"


@app.get(base_path + "/person/{person_name}/{bot_name}")
def person_result(api_key, person_name: str, bot_name: BotName):
    if api_key == "zetabot":
        output = bots[bot_name].person(person_name)
        return output
    else:
        return "not authorized"


@app.get(base_path + "/guess/{prompt}/{choices}/{bot_name}")
def guess_result(api_key, prompt: str, choices: str, bot_name: BotName):
    if api_key == "zetabot":
        output = bots[bot_name].guess(prompt, choices.split("*"))
        return output
    else:
        return "not authorized"
